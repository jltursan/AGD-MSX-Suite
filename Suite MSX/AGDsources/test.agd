; AGD Game Compiler test program.

MACHINE MSX

; Define the play area in characters
; top edge, left edge, height and width respectively

DEFINEFONT      0 0 0 0 0 0 0 0
                0 48 48 48 48 0 48 0
                0 108 108 0 0 0 0 0
                0 108 254 108 108 254 108 0
                0 24 126 120 126 30 126 24
                0 230 236 24 48 110 206 0
                0 48 120 48 126 204 126 0
                0 24 48 0 0 0 0 0
                0 12 24 24 24 24 12 0
                0 96 48 48 48 48 96 0
                0 0 60 24 126 24 60 0
                0 0 24 24 126 24 24 0
                0 0 0 0 0 24 24 48
                0 0 0 0 126 0 0 0
                0 0 0 0 0 56 56 0
                0 0 6 12 24 48 96 0
                0 124 206 222 246 230 124 0
                0 56 120 24 24 24 126 0
                0 124 198 6 124 192 254 0
                0 124 198 28 6 198 124 0
                0 24 56 120 216 254 24 0
                0 254 192 252 6 198 124 0
                0 124 192 252 198 198 124 0
                0 254 6 12 24 48 48 0
                0 124 198 124 198 198 124 0
                0 124 198 198 126 6 124 0
                0 0 0 48 0 0 48 0
                0 0 48 0 0 48 48 96
                0 0 12 24 48 24 12 0
                0 0 0 126 0 126 0 0
                0 0 48 24 12 24 48 0
                0 124 198 12 24 0 24 0
                0 124 222 254 254 192 124 0 ; A
                0 124 198 198 254 198 198 0
                0 252 198 252 198 198 252 0
                0 124 198 192 192 198 124 0
                0 248 204 198 198 204 248 0
                0 254 192 252 192 192 254 0
                0 254 192 252 192 192 192 0
                0 124 198 192 222 198 124 0
                0 198 198 254 198 198 198 0
                0 126 24 24 24 24 126 0
                0 6 6 6 198 198 124 0
                0 204 216 240 216 204 198 0
                0 192 192 192 192 192 254 0
                0 198 238 254 198 198 198 0
                0 198 230 246 222 206 198 0
                0 124 198 198 198 198 124 0
                0 252 198 198 252 192 192 0
                0 124 198 198 246 222 124 0
                0 252 198 198 252 204 198 0
                0 124 192 124 6 198 124 0
                0 254 48 48 48 48 48 0
                0 198 198 198 198 198 124 0
                0 198 198 198 198 108 56 0
                0 198 198 198 198 254 108 0
                0 198 108 56 56 108 198 0
                0 134 204 120 48 48 48 0
                0 254 12 24 48 96 254 0
                0 30 24 24 24 24 30 0
                0 0 192 96 48 24 12 0
                0 240 48 48 48 48 240 0
                0 48 120 252 48 48 48 0
                0 0 0 0 0 0 0 255
                0 60 102 248 96 96 254 0
                0 0 120 12 124 204 124 0
                0 96 96 124 102 102 124 0
                0 0 60 96 96 96 60 0
                0 12 12 124 204 204 124 0
                0 0 120 204 248 192 124 0
                0 28 48 56 48 48 48 0
                0 0 124 204 204 124 12 120
                0 192 192 248 204 204 204 0
                0 48 0 112 48 48 120 0
                0 12 0 12 12 12 108 56
                0 96 120 112 112 120 108 0
                0 48 48 48 48 48 28 0
                0 0 248 252 252 252 252 0
                0 0 248 204 204 204 204 0
                0 0 120 204 204 204 120 0
                0 0 248 204 204 248 192 192
                0 0 124 204 204 124 12 14
                0 0 60 96 96 96 96 0
                0 0 120 192 120 12 248 0
                0 48 120 48 48 48 28 0
                0 0 204 204 204 204 120 0
                0 0 204 204 120 120 48 0
                0 0 204 252 252 252 120 0
                0 0 204 120 48 120 204 0
                0 0 204 204 204 124 12 120
                0 0 252 24 48 96 252 0
                0 30 24 112 24 24 30 0
                0 24 24 24 24 24 24 0
                0 240 48 28 48 48 240 0
                0 60 120 0 0 0 0 0
                124 198 187 227 227 187 198 124
				
DEFINEWINDOW	1 9 22 22

; Background blocks to be used in the game
; First we define the type - eg EMPTYBLOCK, PLATFORMBLOCK or DEADLYBLOCK
; Next 16 numbers are alternating graphic and attribute bytes from top to bottom

; Block 0

DEFINEBLOCK     EMPTYBLOCK      ; property
                0 0 0 0 0 0 0 0 $F1 $F1 $F1 $F1 $F1 $F1 $F1 $F1		; Msx: pattern+color attributes


; Block 1

DEFINEBLOCK     WALLBLOCK       ; property
                $FE,$FE,$FE,$00,$EF,$EF,$EF,$00,$8E,$8E,$6E,$1E,$8E,$8E,$6E,$1E         ; Msx: pattern+color attributes


; Sprites
; First argument defines the number of frames
; Then 32 bytes for each sprite frame (Spectrum)
; 32 for MSX in MSX format
;   or 80 bytes per frame (Amstrad CPC464)

DEFINESPRITE	4
				17,115,55,21,42,125,107,236,206,143,135,13,28,24,12,126,136,206,236,168,80,180,222,54,119,243,241,185,28,56,126,0	
				17,115,55,21,10,45,123,108,238,223,187,185,12,126,0,0,136,206,236,168,84,190,214,55,115,241,225,176,56,24,48,126
				17,115,55,21,10,45,123,108,238,207,143,157,56,28,126,0,136,206,236,168,84,190,214,55,115,241,225,176,56,24,48,126  
				17,115,55,21,42,125,107,236, 206,143,135,13,28,24,12,126, 136,206,236,168,80,180,222,54, 119,251,221,157,48,126,0,0
	
DEFINESPRITE 	3
				48,48,31,56,55,47,47,47,46,46,47,47,240,223,0,0,0,0,251,31,236,244,244,52,84,20,52,244,12,248,12,12
				3,3,31,56,55,47,47,46,236,236,46,47,48,31,0,0,0,0,248,28,236,244,247,119,180,52,116,244,12,248,192,192				
				0,0,31,56,247,239,47,44,41,40,44,47,48,31,12,12,48,48,248,28,236,244,244,244,116,116,247,247,12,248,0,0
	
DEFINESPRITE    1		; number of frames
				$07,$0F,$63,$1F,$7F,$0F,$2A,$77,$FB,$B4,$97,$6F,$0F,$0F,$06,$0E
				$C0,$E0,$F0,$F0,$F0,$70,$50,$EC,$DE,$3E,$EE,$C4,$68,$70,$E0,$F0


DEFINESPRITE    2		; number of frames
				$1F,$7F,$7F,$F3,$E3,$E3,$E7,$FD,$7D,$7F,$1F,$05,$0A,$0F,$07,$00
				$F8,$FE,$FE,$CF,$C7,$C7,$E7,$BF,$BE,$FE,$F8,$50,$A0,$F0,$E0,$00

				$1F,$7F,$7F,$F3,$E3,$E3,$E7,$FD,$7D,$7F,$1F,$05,$00,$0A,$0F,$07
				$F8,$FE,$FE,$CF,$C7,$C7,$E7,$BF,$BE,$FE,$F8,$50,$00,$A0,$F0,$E0

DEFINESPRITE	4
				17,115,55,21,42,125,107,236,206,143,135,13,28,24,12,126,136,206,236,168,80,180,222,54,119,243,241,185,28,56,126,0	
				17,115,55,21,10,45,123,108,238,223,187,185,12,126,0,0,136,206,236,168,84,190,214,55,115,241,225,176,56,24,48,126
				17,115,55,21,10,45,123,108,238,207,143,157,56,28,126,0,136,206,236,168,84,190,214,55,115,241,225,176,56,24,48,126  
				17,115,55,21,42,125,107,236, 206,143,135,13,28,24,12,126, 136,206,236,168,80,180,222,54, 119,251,221,157,48,126,0,0

; Screen layouts are best arranged in monospaced rows and columns
; DEFINESCREEN is followed by the block numbers that make up the screen
; Our play area is 22x22, so we need 22 rows of 22 columns
; The compiler will automatically compress screens

DEFINESCREEN
001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001

; Next we define the sprites that appear on the screen
; SPRITEPOSITION MSX requires 5 numbers for type, image, color, Y coordinate and X coordinate in that order

SPRITEPOSITION 0,0,4,128,128
SPRITEPOSITION 0,4,7,128,128
SPRITEPOSITION 2,1,7,32,88

DEFINESCREEN
001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 001 001 001 001 001 001 001 001 000 000 000 000 001 001 001 001 001 001 001 001 001
SPRITEPOSITION 0,0,4,128,128
SPRITEPOSITION 0,4,7,128,128
SPRITEPOSITION 2,1,9,88,160
SPRITEPOSITION 2,3,15,136,160

DEFINESCREEN
001 001 001 001 001 001 001 001 001 000 000 000 000 001 001 001 001 001 001 001 001 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 001
001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001
SPRITEPOSITION 0,0,4,128,128
SPRITEPOSITION 0,4,7,128,128
SPRITEPOSITION 2,1,2,88,160

; SPRITEPOSITION 0,0,128,128

; Define objects
; For the Next:
; First number is the starting room, next 2 are for Y and X coordinates
; We then need 32 bytes to define the image, just as for sprite frames
; For the Spectrum we start with an attribute byte, then the rest of the data.

DEFINEMESSAGES
	"COLLECT THE RING THEN RETURN TO THE START SCREEN TO COMPLETE YOUR MISSION  "

; Next.
DEFINEOBJECT    2,160,104      ; room, Y, X
				$00,$0E,$19,$1D,$1B,$0E,$00,$07
				$00,$00,$00,$78,$7C,$60,$82,$02
				$0E,$0E,$0C,$0C,$0C,$06,$03,$00
				$02,$04,$04,$08,$18,$60,$40,$00				
				$11,$F1,$71,$71,$41,$41,$41,$B1
				$B1,$B1,$B1,$F1,$B1,$B1,$B1,$31
				$B1,$B1,$B1,$B1,$B1,$A1,$A1,$A1
				$31,$31,$31,$31,$31,$31,$A1,$A1

; Map.
; First argument is WIDTH, second is the startscreen
; We then arrange the map as a grid with correct width, monospaced here for readability
; where no room is present we put 255

MAP		WIDTH 4
		STARTSCREEN 0

		255 001 000 255
		255 002 255 255

ENDMAP

; Sprite events
; Player controls

EVENT PLAYER

IF C = 0

	DETECTOBJ
	IF OBJ = 0
		GET OBJ
	ENDIF

	IF KEY UP
		IF Y <= TOPEDGE
			SCREENUP
			LET Y = BOTTOMEDGE
			EXIT
		ELSE
			IF CANGOUP
				SPRITEUP
			ENDIF
		ENDIF
	ENDIF

	IF KEY DOWN
		IF Y >= BOTTOMEDGE
			SCREENDOWN
			LET Y = TOPEDGE
			EXIT
		ELSE
			IF CANGODOWN
				SPRITEDOWN
			ENDIF
		ENDIF
	ENDIF

	IF KEY LEFT
		IF X <= LEFTEDGE
			SCREENLEFT
			LET X = RIGHTEDGE
			EXIT
		ELSE
			IF CANGOLEFT
				SPRITELEFT
			ENDIF
		ENDIF
	ENDIF

	IF KEY RIGHT
		IF X >= RIGHTEDGE
			SCREENRIGHT
			LET X = LEFTEDGE
			EXIT
		ELSE
			IF CANGORIGHT
				SPRITERIGHT
			ENDIF
		ENDIF
	ENDIF

	IF KEY FIRE1
		EXPLODE 16
	ENDIF

	ANIMATE SLOW

	LET W = X
	LET Z = Y
	LET C 1

ELSE
	IF C = 1
		ADD 1 TO W
		ADD 1 TO Z
		LET X = W
		LET Y = Z
		LET C 0
		ANIMATE SLOW
	ENDIF
ENDIF


EVENT SPRITETYPE1



EVENT SPRITETYPE2

; Up/down movement.
; DIRECTION variable indicates which way we're going.
IF DIRECTION = 0
    IF CANGOUP
        SPRITEUP
    ELSE
        LET DIRECTION = 1
    ENDIF
ELSE
    IF CANGODOWN
        SPRITEDOWN
    ELSE
        LET DIRECTION = 0
    ENDIF
ENDIF

; Left/right movement.
; Only one DIRECTION variable per sprite, so we use SETTINGA for the horizontal.
IF SETTINGA = 0
    IF CANGOLEFT
        SPRITELEFT
    ELSE
        LET SETTINGA = 1
    ENDIF
ELSE
    IF CANGORIGHT
        SPRITERIGHT
    ELSE
        LET SETTINGA = 0
    ENDIF
ENDIF

ANIMATE SLOW

; Kill player if this sprite comes into contact with him/her.
IF COLLISION PLAYER
    KILL
ENDIF

EVENT SPRITETYPE3

EVENT SPRITETYPE4

EVENT SPRITETYPE5

EVENT SPRITETYPE6

EVENT SPRITETYPE7

EVENT SPRITETYPE8

EVENT INITSPRITE

EVENT MAINLOOP1
IF SCREEN = 0
    IF GOT 0
        ENDGAME
    ENDIF
ENDIF

EVENT MAINLOOP2

EVENT INTROMENU

; This is the intro menu with 3 control options and one to redefine the keys.
; You may wish to edit this depending upon whether you're building for Sinclair or Amstrad.
BORDER 1
COLOUR $81
; CLS
CLW
AT 5 8
PRINT "SIMPLE TEST GAME"
INK 15
AT 9 8
PRINT "1. KEYBOARD"
AT 11 8
PRINT "2. JOYSTICK"
AT 13 8
PRINT "3. REDEFINE KEYS"
COLOUR $4F
AT 17 0
PRINT "                                "
AT 17 0
; TICKER 32 "COLLECT THE RING THEN RETURN TO THE START SCREEN TO COMPLETE YOUR MISSION  "
TICKER 32 0
COLOUR $F1
LET CONTROL = 99
WHILE CONTROL = 99
	DELAY 1
	IF KEY OPTION1
		BORDER 6
		LET CONTROL 0
	ENDIF
	IF KEY OPTION2
		BORDER 2
		LET CONTROL 1
	ENDIF
	IF KEY OPTION3
		TICKER 0
		BORDER 13
		DELAY 25
		CLS
		INK 7
		AT 2 4
		PRINT "PRESS KEY FOR:"
		AT 5 15
		INK 10
		PRINT "UP"
		DEFINEKEY UP
		DELAY 15
		AT 7 14
		PRINT "DOWN"
		DEFINEKEY DOWN
		DELAY 15
		AT 9 14
		PRINT "LEFT"
		DEFINEKEY LEFT
		DELAY 15
		AT 11 13
		PRINT "RIGHT"
		DEFINEKEY RIGHT
		DELAY 15
		LET CONTROL = 0
	ENDIF
ENDWHILE
TICKER 0
CLS

EVENT GAMEINIT
LET LIVES = 3

EVENT RESTARTSCREEN
PAPER 1
INK 2
AT 2 1
PRINT "LIVES"
INK 7
AT 3 3
DISPLAY LIVES
LET C 0

EVENT FELLTOOFAR

EVENT KILLPLAYER
SUBTRACT 1 FROM LIVES

EVENT LOSTGAME
AT 11 16
PRINT "GAME"
AT 12 16
PRINT "OVER"
WAITKEY

EVENT COMPLETEDGAME
CLS
INK 10
PAPER 4
AT 11 8
PRINT "CONGRATULATIONS!"
DELAY 150

EVENT NEWHIGHSCORE
AT 4,9
PRINT "NEW HIGH SCORE"

EVENT COLLECTBLOCK